#!/usr/bin/env bash

alias gs='git status'
alias gco='git checkout'
alias gr='git rebase'
alias gf='git fetch'
alias gp='git push'
alias gpl='git pull'

__git_complete gco _git_checkout
__git_complete gr _git_checkout
__git_complete gri _git_checkout
__git_complete ga _git_add
__git_complete gac _git_add

gl() {
    local arg="$1"
    shift
    if [ -z "$arg" ]
    then
        git log --oneline --graph --all "$@"
    else
        if [ "$arg" = "-h" ] || [ "$arg" = "--help" ] 
        then
            echo "gl: \"git log\""
            echo "usage: \"gl <option>\""
            echo ""
            echo "options:"
            echo "          -h --help    | Display this help"
            echo "          -v --verbose | Default git log"
            echo "          -o --oneline | git log --oneline --graph --all"
            echo ""
            echo "additional arguments will be passed to git log"
        elif [ "$arg" = "-v" ] || [ "$arg" = "--verbose" ] 
        then
            git log "$@"
        elif [ "$arg" = "-o" ] || [ "$arg" = "--online" ] 
        then
            git log --oneline --graph --all "$@"
        else
            git log --oneline --graph --all "$arg" "$@"
        fi
    fi
}

ga() {
    if [ -z "$1" ] 
    then
        git add .
    else
        git add "$@"
    fi
}

gc() {
    if [ -z "$1" ] 
    then
        echo "error: commit message requires a value"
        echo ""
        echo "gc: \"git commit with message\""
        echo "usage: \"gc [commit message]\""
        echo ""
        echo "options:"
        echo "          -i --ignore-max-length  | Ignore the 50 character length limit of commit messages"
    else
        local commit="$1"
        shift

        if [ "$1" = "--ignore-max-length" ] || [ "$1" = "-i" ]
        then
            shift
        else
            local length
            length=$(echo -n "$commit" | wc -c)
            if [ "$length" -gt 50 ]
            then
                echo "error: commit message exceeds 50 characters (was $length)"
                echo "use --ignore-max-length to ignore this constraint"
                return
            fi
        fi

        git commit -m "$commit"
    fi
}

gac() {
    if [ -z "$1" ] 
    then
        echo "error: commit message requires a value"
        echo ""
        echo "gac: \"git stage and commit\""
        echo "usage: \"gac [commit message] <options> <files to stage>\""
        echo ""
        echo "options:"
        echo "          -i --ignore-max-length  | Ignore the 50 character length limit of commit messages"
    else
        local commit="$1"
        shift

        if [ "$1" = "--ignore-max-length" ] || [ "$1" = "-i" ]
        then
            shift
        else
            local length
            length=$(echo -n "$commit" | wc -c)
            if [ "$length" -gt 50 ]
            then
                echo "error: commit message exceeds 50 characters (was $length)"
                echo "use --ignore-max-length to ignore this constraint" 
                return
            fi
        fi

        if [ -z "$1" ] 
        then
            git add .
        else
            git add "$@"
        fi

        git commit -m "$commit"
    fi
}

gri() {
    if [ -z "$1" ] 
    then
        echo "error: count requires a value"
        echo ""
        echo "gri: \"git rebase interactive (from head)\""
        echo "usage: \"gri [count]\""
    else
        git rebase -i head~"$1"
    fi
}